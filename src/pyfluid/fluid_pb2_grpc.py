# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pyfluid.fluid_pb2 as fluid__pb2


class FluidStub(object):
    """service which can be executed
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_unary(
                '/rpc.Fluid/Query',
                request_serializer=fluid__pb2.QueryRequest.SerializeToString,
                response_deserializer=fluid__pb2.QueryResponse.FromString,
                )
        self.Node = channel.unary_unary(
                '/rpc.Fluid/Node',
                request_serializer=fluid__pb2.NodeRequest.SerializeToString,
                response_deserializer=fluid__pb2.NodeResponse.FromString,
                )
        self.EdgeStream = channel.stream_unary(
                '/rpc.Fluid/EdgeStream',
                request_serializer=fluid__pb2.EdgeStreamRequest.SerializeToString,
                response_deserializer=fluid__pb2.EdgeStreamResponse.FromString,
                )
        self.NodeStream = channel.stream_unary(
                '/rpc.Fluid/NodeStream',
                request_serializer=fluid__pb2.NodeStreamRequest.SerializeToString,
                response_deserializer=fluid__pb2.NodeStreamResponse.FromString,
                )


class FluidServicer(object):
    """service which can be executed
    """

    def Query(self, request, context):
        """ReceiveStream?
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EdgeStream(self, request_iterator, context):
        """different? AddEdgeStream?
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FluidServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=fluid__pb2.QueryRequest.FromString,
                    response_serializer=fluid__pb2.QueryResponse.SerializeToString,
            ),
            'Node': grpc.unary_unary_rpc_method_handler(
                    servicer.Node,
                    request_deserializer=fluid__pb2.NodeRequest.FromString,
                    response_serializer=fluid__pb2.NodeResponse.SerializeToString,
            ),
            'EdgeStream': grpc.stream_unary_rpc_method_handler(
                    servicer.EdgeStream,
                    request_deserializer=fluid__pb2.EdgeStreamRequest.FromString,
                    response_serializer=fluid__pb2.EdgeStreamResponse.SerializeToString,
            ),
            'NodeStream': grpc.stream_unary_rpc_method_handler(
                    servicer.NodeStream,
                    request_deserializer=fluid__pb2.NodeStreamRequest.FromString,
                    response_serializer=fluid__pb2.NodeStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.Fluid', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Fluid(object):
    """service which can be executed
    """

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.Fluid/Query',
            fluid__pb2.QueryRequest.SerializeToString,
            fluid__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.Fluid/Node',
            fluid__pb2.NodeRequest.SerializeToString,
            fluid__pb2.NodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EdgeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/rpc.Fluid/EdgeStream',
            fluid__pb2.EdgeStreamRequest.SerializeToString,
            fluid__pb2.EdgeStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/rpc.Fluid/NodeStream',
            fluid__pb2.NodeStreamRequest.SerializeToString,
            fluid__pb2.NodeStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
